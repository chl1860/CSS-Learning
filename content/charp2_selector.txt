1. 基本规则
    1) 规则结构
        每个规则都有两个基本部分：选择器和声明块
        声明块由一个或多个声明组成，每个声明都是一个属性-值对

    2) 元素选择器：
        文档元素是最基本的选择器

    3) 声明和关键字
        声明格式：一个属性后面跟一个冒号，再后面是一个值，然后是一个分号，几乎在所有情况下，值要么是个关键字，要么是个关键字列表，关键字间用空格分隔。如果声明中使用了不正确的属性或值，整个声明都会被忽略
         CSS 关键字通常用空格分隔，只有一种情况例外。 在CSS的font属性中，只有一种情况可以使用 斜线来分隔两个特定关键字
            h2 {font: larg/150% sans-serif;}
            斜线分隔了用来设置元素字体大小和行高的两个关键字，只有在这里才允许font声明中出现斜线。font允许的所有其他关键字都用空格分隔

2. 分组
    选择器分组：将多个选择器用逗号隔开
    通配选择器： * 表示，指向文档中所有元素     
    声明分组：将声明块中的各个声明用分号隔开

3. 类选择器和ID选择器
    1) 类选择器：要应用样式而不考虑具体涉及的元素，最常用的方式就是使用类选择器
            .加class属性中的值

    2) 多类选择器：
            .warning {font-weight:bold;}
            .urgent {font-style: italic;}
            .warning.urgent{background:silver;}
            通过把两个类选择器链接在一起，仅可以选择同时包含这些类名的元素（类名的顺序不限）

    3) #ID 选择器
            在同一个 HTML文档中 id 选择器会使用一次，而且仅一次
                注意： 浏览器并不会检查 HTML 中ID的唯一性，这意味着如果在 HTML文档中，设置了多个相同ID的元素，就可能会为这些元素使用相同的样式，这种行为是不正确的，这会导致编写DOM脚本更为困难

    4) HTML 和 XHTML中ID选择器和类选择器是区分大小写的

4. 属性选择器
   1) 简单属性选择器，基本格式：elem[attr]{ your-declaration;}
   2) 根据多个属性进行选择，只需将属性选择器连接在一起即可。例如： a[href][title]{font-weight:bold;} 将只对：<a href='your_href' title=''>Link</a>起作用，对<a href='your_href'>Link</a> 和 <a title='your_title'>link</a> 不起作用
   3) 根据具体属性值选择： elem[attr1 = val1][attr2=val2]{your-declaration;} 
        Tips： 这种格式要求与具体属性值必须完全匹配
   4) 根据部分属性值匹配：elem[attr ~= val]{your-declaration},在属性为class时‘~=’ 与‘.’等价
   5) 子串匹配属性选择器
    [foo^='bar'] 选择foo属性值以bar开头的所有元素
    [foo$='bar'] 选择foo属性值以bar结尾的所有元素
    [foo*='bar'] 选择foo属性值包含bar的所有元素

5. 特定属性选择类型
    1) *[lang|="en"]{color:white;}
    2) 这条规则会选定lang属性值为 en 或 en- 的元素
    3) 通常 [attr|="val"]可以用于任何属性和它的值
    4) 这种属性选择器最常见的用途是匹配语言值

6. 使用文档结构
    1) 理解父子关系
        如果一个元素出现在文档层次结构中另一个元素的上一层，则称前者是后者的父元素。
        如果一个元素出现在文档层次结构中另一个元素的下一层，则称前者是后者的子元素。
        父子关系是祖先-后代关系的特例。
            二者间的区别：如果一个元素在另一个元素的直接上一层，它们就有父子关系。如果从一个元素到另一个元素的路径上要经过两层或多层，这些元素则有祖先后代关系
        在一个后代选择器中，规则左边的选择器一端包含两个或多个用空格分隔的选择器。选择器间的空格是一种结合符，可解释为“……在……中找到”，“……作为……的一部分”或者“……作为……的后代”，但是要求必须从右向左读选择器

    2）选择子元素：
        使用结合符：>
        例如：h1>strong{color:red;}这个规则会把第一个h1下面出现的 strong元素变红，但是第二个出现的strong元素不受影响
        <h1>This is <strong>very</strong> important</h1>
        <h1>this is <em>realy<strong>very</strong>important</em> 
        子结合符两边可以有空白符

    3) 选择兄弟元素
        使用结合符：+
        兄弟结合符两边可以有空白符
        用一个结合符只能选择两个相邻兄弟中的第二个元素
    4) 警告： IE6之前不支持子选择器和相邻兄弟选择器。IE7对二者提供了支持

7. 伪类和伪元素
    1) 伪类选择器
        所有伪类和伪元素关键字前面都有一个冒号
    
    2) 链接伪类
        :link   指示作为超链接 (即有一个 href 属性) 并指向一个为访问地址的所有锚。
        :visited 指示作为已访问地址超链接的所有锚
        :link 和 :visited 非常有用，但它们是静态的 —— 第一次显示后， 它们一般不会再改变文档的样式

    3) 动态伪类
        :focus  表示当前拥有输入焦点的元素，也就是说，可以接受键盘输入或者能以某种方式激活的元素
        :hover  鼠标指针停留在哪个元素上
        :active     指示被用户输入激活的元素。 例如，鼠标指针停留在一个超链接上时，如果用户点击鼠标，就会激活这个超链接，:active 将指示这个超链接

        注意：伪类的顺序很重要，通常的建议是“link - visited - hover - active”, 不过现在已经改为“link - visited - focus - hover - active”
        
        动态伪类可以应用到任意元素
        注意：IE6之前，不允许动态伪类选择除超链以为的其他元素。 IE7支持对所有元素使用 :hover 但不支持对表单元素使用 :focus

    4) 动态样式的实际问题
        1) CSS规范指出：文档第一次显示之后，用户代理不必重绘文档，所以你不能完全依赖预想的效果，也就是说不要指望你预想的效果肯定会发生
        2) 选择第一个子元素（:first-child）,elem:first-child 选中的是作为某个元素的第一个子元素elem 
            注意： IE6之前不支持 :first-child, IE7支持

        2) 根据元素的语言选择(:lang())
            伪类比属性更健壮，在需要语言特定的样式时，大多数情况下伪类是更好的选择

        3) 结合伪类：
            用哪种顺序指定并不重要，但不要把互斥的伪类结合在一起使用，防止浏览器无法正确处理这些组合的伪类
        
    5) 伪元素选择器
        CSS2.1中定义了4个伪元素：设置首字母样式、设置第一行样式、设置之前和之后元素的样式
        a) 设置首字母样式（:first-letter）
        b) 设置第一行的样式 (:first-line)
        c) :first-letter 和 :first-line 只能用于标记或段落之类的块级元素，不能用于行内元素
        d) 所有伪元素都必须放在出现该伪元素的选择器的后面
        e) 设置之前(:before)和之后(:after)元素的样式
            例如: h2:before{content:'}}'; color:silver}