文本和字体的区别： 文本是内容，字体用于显示这个内容。
1. 缩进和水平对齐
    1) text-indent：
        值：<length>|<percentage>|inherit
        初始值:0
        应用于: 块级元素
        继承性: 有
        百分数: 相对于包含块的宽度
        计算值: 对于百分数值，要根据指定确定；对于一个长度则为绝对长度

        a) 使用 text-indent 属性，所有元素的第一行都可以缩进一个给定长度，甚至该长度可以是负值
        b) text-indent 对行内元素和替换元素(如图片元素) 无效，但如果一个块级元素首行有图像，它会随着该行的其余文本移动
    
        c) Tips：
            如果想把行内元素缩进可以用左侧内边距或外边距制造这样的效果
            text-indent 为负值时可以实现悬挂缩进，即第一行悬挂中元素中其余部分的左边
            为避免缩进为负值时会超出浏览器的左边界，建议对负缩进设置一个外边距或一些内边距
    
        d) Note:
            即使插入了分隔符，这种伸缩也只用于第一个元素的第一行
    2) 水平对齐
        text-align:
            值：left|center|right|justify|inherit
            初始值：用户代理特定的值，还可能取决于书写方向
            应用于： 块级元素
            继承性： 有
            计算值： 根据指定确定

        注意：将块级元素或表元素居中，这要通过在这些元素上适当地设置左、右边距来实现。 text-algin不会控制元素对齐，而只影响其内部内容(inline content)

        justify存在的问题: 文本行的左右两端都放在父元素的内边界上，然后，调整单词和字母间的间隔，使各行长度恰好相等，由用户代理来确定文本如何拉伸，以填满左右边界间的空间，这种做法会影响元素外观，甚至改变其高度，这取决于用户代理的对齐选择影响了多少文本行

2. 垂直对齐
    1) 行高
        line-height 是指文本行基线间的距离，而不是字体大小，它确定了将各个元素框的高度增加或减少多少
        line-height
            值：<length>|<percentage>|<number>|normal|inherit
            初始值：normal
            应用于：所有元素(不过请参考关于替换元素和块级元素的介绍)
            继承性：有
            百分数: 相对于元素的字体大小
            计算值：对长度和百分数是绝对值，否则，根据指定确定

        应用到块级元素时，line-height定义了元素中文本基线之间的最小距离
    
    2) 构造文本行
        文本行中的每个元素都会生成一个内容区，这由字体大小确定。这个内容区则会生成一个行内框，如果不存在其他因素，这个行内框就完全等于该元素的内容区
        总行间距 =  (line-height) - (font-size)

    3) 行高和继承
        当一个块级元素从另一个元素继承line-height 时，要从父元素开始计算而不是从子元素
        使用line-height缩放因子解决继承问题

    4) 垂直对齐文本
        vertical-align
        值：baseline|sub|super|top|text-top|middle|bottom|text-bottom|<percentage>|<length>|inherit
        初始值：baseline
        应用于：行内元素和表单元格
        继承性：无
        百分数：想对于元素的 line-height 值
        计算值：对于百分数和长度为绝对长度；否则，根据指定确定
        说明：应用到表单元格时，只能识别baseline、top、middle和bottom等

    5) 基线对齐
        vertical-align: baseline 要求一个元素的基线与其父元素的基线对齐
        如果一个垂直对齐元素没有基线，那么该元素的底端与其父元素基线对齐

    6) 上标和下标
        vertical-align: sub 声明会使一个元素变成下标，这意味着其基线相对于其父元素的基线低（低的距离由用户代理确定）
        vertical-align: supper 与 sub 刚好相反
        vertical-align：bottom 将元素内框的底端与行框的底端对齐
        vertical-align：text-bottom 是指行内文本的底端。替换元素或任何其他类型的非文本元素会忽略这个值。对于这些元素，将考虑一个“默认”的文本框。这个默认文本框由父元素的 font-size得到，要对齐元素的行内框底端再与这个默认文本框对齐

    7) 顶端对齐：
        vertical-algin：top的效果和bottom相反，类似 vertical-align: text-top和 text-bottom相反

    8) 居中对齐
        往往用于图像。middle会把行内元素中点与父元素基线上方0.5ex处的一个点对齐

    9) 百分数
        使用百分数不能模仿图像的 align = "middle"对齐。相反，如果为 vertical-algin设置一个百分数，会把元素的基线相对于父元素的基线升高或降低

    10) 长度对齐
        把一个元素上升或降低指定距离
        垂直对齐的文本并不会成为另一行的一部分，它也不会覆盖其他行中的文本
        所有垂直对齐的元素都会影响行高

3. 字间隔和字母间隔
    1) 字间隔
        接受一个正长度值或负长度值。这个长度会增加到字之间的标准间隔
        word-spacing
        值：<length>|normal|inherit
        初始值：normal
        应用于：所有元素
        继承性：有
        计算值：normal为绝对长度0，否则，为绝对长度


    2) 字母间隔
        接受一个正长度值或负长度值。这个长度会增加到字母之间的标准间隔
        letter-spacing
        值：<length>|normal|inherit
        初始值：normal
        应用于：所有元素
        继承性：有
        计算值：normal为绝对长度0，否则，为绝对长度

        可以用 letter-sapcing来突出强调效果
    
    3) 间距和对齐
        word-spacing可能受 text-align 属性值影响.如果一个元素是两端对齐的，字母和字之间的空间可能会调整，以便文本在整行中刚好放下
        一般地，一个元素的子元素会继承该元素的继承值，无法为word-sapcing 或letter spacing定义一个可继承的缩放因子来取代计算值
        如果字母间隔和文本大小成比例，得到字母间隔的唯一办法是显式设置 letter-spacing

4. 文本转换
    text-transform
    值：uppercase|lowercase|capitalize|none|inherit
    初始值：none
    应用于：所有元素
    继承性：有
    计算值：根据指定确定

    ！！注意：capitallize只对每个单词的首字母大写，uppercase 和 lowercase 是将文本转换为全大写或全小写

5. 文本装饰
    text-decoration
    值：none | [underline || overline || line-through || blink ] | inherit
    初始值：none
    应用于：所有元素
    继承性：无
    计算值：根据指定确定

    ！！注意：blink 不是所有的浏览器都支持；如果两个不同的装饰用于同一个元素匹配，胜出的规则值会完全取代另一个值。

6. 文本阴影
    text-shadow
    值: none | [<color> || <length> <length> <length>? ,]* [<color> || <length> <length> <length>?] | inherit
    初始值：none
    应用于：所有元素
    继承性：无

    每个阴影都由一个颜色和3个长度来定义；前两个长度值确定了阴影与文本的偏移距离，第三个长度值可选，定义了阴影的模糊半径
    egg.要定义一个相对于文本右偏移5px，向下偏移0.5em的绿色阴影，且不模糊，可以写作：
        text-shadow: green 5px 0.5em; 
    负长度值会使阴影落在文本左上方

    1) 处理空白字符
        white-space
        值：normal | nowrap | pre | pre-wrap | pre-line | inherit
        初始值：normal
        应用于：all elements (CSS2.1); block-level elements (CSS1 and CSS2)
        继承性：无
        计算值：根据指定确定

         To a certain extent, XHTML already does this: it collapses any whitespace down to a single space. So given the following markup, the rendering in a web browser would be to show only one space between each word and to ignore the linefeed in the elements
         Should you set white-space to pre, however, the whitespace in an affected element is treated as though the elements were XHTML pre elements; whitespace is not ignored
         The opposite property is nowrap, which prevents text from wrapping within a block-level element, except when you use a <br/> element
         pre-wrap: 会保留空白符序列，但是文本行会正常地换行。如果设置为这个值，原文本中的行分隔符以及生成的行分隔符也会保留。
         pre-line：会像正常文本一样合并空白符序列，但会保留换行符

     2) 文本方向
        direction
        值：ltr | rtl | inherit
        初始值：ltr
        应用于：all elements
        继承性：有
        计算值：根据指定确定

        direction 影响块级元素中文本的书写方向、表中列布局的方向、内容水平填充其元素框的方向，以及两端对齐元素中最后一行的位置，对于行内元素只有unicode-bidi属性设置为embed 或 bidi-override时才会用 direction属性

        unicode-bidi
        值：normal | embed | bidi-override | inherit
        初始值：normal
        应用于：所有元素
        继承性：无
        计算值：根据指定确定

        embed：如果是一个行内元素，这个值对于双向算法会打开附加的一层嵌套。这个嵌套层的方向由 direction 属性指定。会在元素内部隐式地完成重排
        bidi-override：会为行内元素创建一个覆盖。对于块级元素，将为不在另一块中的行内后代创建一个覆盖。这说明，顺序重排在元素内部严格按 direction 属性进行，忽略了双向算法的隐式部分   

        
     

